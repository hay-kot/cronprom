// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package config

import (
	"errors"
	"fmt"
)

const (
	// MetricTypeGauge is a MetricType of type gauge.
	MetricTypeGauge MetricType = "gauge"
	// MetricTypeCounter is a MetricType of type counter.
	MetricTypeCounter MetricType = "counter"
	// MetricTypeHistogram is a MetricType of type histogram.
	MetricTypeHistogram MetricType = "histogram"
	// MetricTypeSummary is a MetricType of type summary.
	MetricTypeSummary MetricType = "summary"
)

var ErrInvalidMetricType = errors.New("not a valid MetricType")

// String implements the Stringer interface.
func (x MetricType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MetricType) IsValid() bool {
	_, err := ParseMetricType(string(x))
	return err == nil
}

var _MetricTypeValue = map[string]MetricType{
	"gauge":     MetricTypeGauge,
	"counter":   MetricTypeCounter,
	"histogram": MetricTypeHistogram,
	"summary":   MetricTypeSummary,
}

// ParseMetricType attempts to convert a string to a MetricType.
func ParseMetricType(name string) (MetricType, error) {
	if x, ok := _MetricTypeValue[name]; ok {
		return x, nil
	}
	return MetricType(""), fmt.Errorf("%s is %w", name, ErrInvalidMetricType)
}
